LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/raibot007/infant_cry_knowledge_graph/main/audio_features.csv" AS row
//load csv with HEADERS from 'file:///audio_features.csv' AS row
MATCH (c:Class {name:row.class, dataset:row.dataset})
MERGE (a:Audio {id:row.file_id})
	SET a.filename = row.original_filename, a.dataset = row.dataset, a.class = row.class, a.duration = toFloat(row.original_duration), a.snr_estimate_db = toFloat(row.snr_estimate_db), a.dynamic_range_db = toFloat(row.dynamic_range_db), a.zero_crossing_rate = toFloat(row.zero_crossing_rate), a.gender = CASE WHEN row.gender IS NOT NULL THEN row.gender ELSE null END, a.age_months = CASE WHEN row.age_months IS NOT NULL THEN toInteger(row.age_months) ELSE null END, a.original_sample_rate = toInteger(row.original_sample_rate), a.target_sample_rate = toInteger(row.target_sample_rate), a.created_date = datetime()
MERGE (rms:RMS {mean: toFloat(row.rms_mean), std: toFloat(row.rms_std)})
MERGE (zcr:ZCR {mean: toFloat(row.zcr_mean), std: toFloat(row.zcr_std)}) 
MERGE (amplitude:Amplitude {mean: toFloat(row.amplitude_mean), std: toFloat(row.amplitude_std), skewness: toFloat(row.amplitude_skewness), kurtosis: toFloat(row.amplitude_kurtosis), modulation_depth: toFloat(row.amplitude_modulation_depth), dynamic_range: toFloat(row.dynamic_range)})
MERGE (temporal:TemporalFeatures {centroid: toFloat(row.temporal_centroid), autocorr_peak_value: toFloat(row.autocorr_peak_value), autocorr_peak_lag: toFloat(row.autocorr_peak_lag), silence_ratio: toFloat(row.silence_ratio), burst_density: toFloat(row.burst_density)})
MERGE (spectral:SpectralFeatures {centroid_mean: toFloat(row.spectral_centroid_mean), centroid_std: toFloat(row.spectral_centroid_std), bandwidth_mean: toFloat(row.spectral_bandwidth_mean), rolloff_mean: toFloat(row.spectral_rolloff_mean), flatness_mean: toFloat(row.spectral_flatness_mean), flux_mean: toFloat(row.spectral_flux_mean), slope_mean: toFloat(row.spectral_slope_mean), skewness_mean: toFloat(row.spectral_skewness_mean), kurtosis_mean: toFloat(row.spectral_kurtosis_mean), irregularity: toFloat(row.spectral_irregularity)})
MERGE (mfcc:MFCC {mfcc1_mean: toFloat(row.mfcc_1_mean), mfcc1_std: toFloat(row.mfcc_1_std), mfcc2_mean: toFloat(row.mfcc_2_mean), mfcc2_std: toFloat(row.mfcc_2_std), mfcc3_mean: toFloat(row.mfcc_3_mean), mfcc3_std: toFloat(row.mfcc_3_std), mfcc4_mean: toFloat(row.mfcc_4_mean), mfcc4_std: toFloat(row.mfcc_4_std), mfcc5_mean: toFloat(row.mfcc_5_mean), mfcc5_std: toFloat(row.mfcc_5_std), mfcc6_mean: toFloat(row.mfcc_6_mean), mfcc6_std: toFloat(row.mfcc_6_std), mfcc7_mean: toFloat(row.mfcc_7_mean), mfcc7_std: toFloat(row.mfcc_7_std), mfcc8_mean: toFloat(row.mfcc_8_mean), mfcc8_std: toFloat(row.mfcc_8_std), mfcc9_mean: toFloat(row.mfcc_9_mean), mfcc9_std: toFloat(row.mfcc_9_std), mfcc10_mean: toFloat(row.mfcc_10_mean), mfcc10_std: toFloat(row.mfcc_10_std), mfcc11_mean: toFloat(row.mfcc_11_mean), mfcc11_std: toFloat(row.mfcc_11_std), mfcc12_mean: toFloat(row.mfcc_12_mean), mfcc12_std: toFloat(row.mfcc_12_std), mfcc13_mean: toFloat(row.mfcc_13_mean), mfcc13_std: toFloat(row.mfcc_13_std)})
MERGE (prosodic:Prosodic {f0_mean: toFloat(row.f0_mean), f0_std: toFloat(row.f0_std), harmonicity: toFloat(row.harmonicity), pitch_strength: toFloat(row.pitch_strength)})
MERGE (psychoacoustic:Psychoacoustic {loudness_mean: toFloat(row.loudness_mean), loudness_std: toFloat(row.loudness_std), sharpness_mean: toFloat(row.sharpness_mean), roughness: toFloat(row.roughness), tonality_coefficient: toFloat(row.tonality_coefficient), fluctuation_strength: toFloat(row.fluctuation_strength)}) 
MERGE (chroma:Chroma {C: toFloat(row.chroma_1), C_sharp: toFloat(row.chroma_2), D: toFloat(row.chroma_3), D_sharp: toFloat(row.chroma_4), E: toFloat(row.chroma_5), F: toFloat(row.chroma_6), F_sharp: toFloat(row.chroma_7), G: toFloat(row.chroma_8), G_sharp: toFloat(row.chroma_9), A: toFloat(row.chroma_10), A_sharp: toFloat(row.chroma_11), B: toFloat(row.chroma_12)})
MERGE (contrast:SpectralContrast {sub_band: toFloat(row.spectral_contrast_sub_band), band_1: toFloat(row.spectral_contrast_band_1), band_2: toFloat(row.spectral_contrast_band_2), band_3: toFloat(row.spectral_contrast_band_3), band_4: toFloat(row.spectral_contrast_band_4), band_5: toFloat(row.spectral_contrast_band_5), band_6: toFloat(row.spectral_contrast_band_6)})
MERGE (voice_quality:VoiceQuality {jitter: toFloat(row.jitter), shimmer: toFloat(row.shimmer), f0_range: toFloat(row.f0_range), f0_contour_slope: toFloat(row.f0_contour_slope), vocal_effort: toFloat(row.vocal_effort)})
MERGE (formants:Formants {f1_mean: toFloat(row.f1_mean), f2_mean: toFloat(row.f2_mean), f3_mean: toFloat(row.f3_mean)})
MERGE (c)-[:HAS_AUDIO]->(a)
MERGE (a)-[:HAS_RMS]->(rms)
MERGE (a)-[:HAS_ZCR]->(zcr)
MERGE (a)-[:HAS_AMPLITUDE]->(amplitude)
MERGE (a)-[:HAS_TEMPORAL_FEATURES]->(temporal)
MERGE (a)-[:HAS_SPECTRAL_FEATURES]->(spectral)
MERGE (a)-[:HAS_MFCC]->(mfcc)
MERGE (a)-[:HAS_PROSODIC_FEATURES]->(prosodic)
MERGE (a)-[:HAS_PSYCHOACOUSTIC_FEATURES]->(psychoacoustic)
MERGE (a)-[:HAS_CHROMA]->(chroma)
MERGE (a)-[:HAS_SPECTRAL_CONTRAST]->(contrast)
MERGE (a)-[:HAS_VOICE_QUALITY]->(voice_quality)
MERGE (a)-[:HAS_FORMANTS]->(formants)